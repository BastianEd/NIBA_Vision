package com.example.niba_vision.util

/**
 * Objeto singleton que contiene funciones de validaci√≥n para los campos del formulario.
 *
 * Proporciona m√©todos est√°ticos para validar nombres, correos electr√≥nicos, contrase√±as,
 * tel√©fonos y la selecci√≥n de g√©neros, siguiendo las reglas de negocio de ZONALIBROS.
 */
object Validators {
    // Expresiones regulares para las validaciones.
    private val nameRegex = Regex("^[A-Za-z√Å√â√ç√ì√ö√°√©√≠√≥√∫√ë√± ]{1,100}$")
    private val emailRegex = Regex("^[A-Za-z0-9._%+-]+@duoc\\.cl$", RegexOption.IGNORE_CASE)
    private val upper = Regex(".*[A-Z].*")
    private val lower = Regex(".*[a-z].*")
    private val digit = Regex(".*[0-9].*")
    private val special = Regex(".*[@#\\$%].*")
    // üí° Modificada para aceptar n√∫meros de 8 d√≠gitos (sin prefijo) o el formato completo (+569xxxxxxxxx)
    private val phoneRegex = Regex("^((\\+569)?\\d{8})$")

    /**
     * Valida el nombre completo del usuario.
     * @param name El nombre a validar.
     * @return Un mensaje de error si no es v√°lido, o `null` si es correcto.
     */
    fun validateName(name: String) = when {
        name.isBlank() -> "El nombre no puede estar vac√≠o."
        !nameRegex.matches(name.trim()) -> "Solo letras y espacios (m√°x. 100)."
        else -> null
    }

    /**
     * Valida el correo electr√≥nico, asegurando que sea de dominio @duoc.cl.
     * @param email El correo a validar.
     * @return Un mensaje de error si no es v√°lido, o `null` si es correcto.
     */
    fun validateEmail(email: String) = when {
        email.isBlank() -> "El correo no puede estar vac√≠o."
        email.length > 60 -> "M√°x. 60 caracteres."
        !emailRegex.matches(email.trim()) -> "Debe ser un correo @duoc.cl v√°lido."
        else -> null
    }

    /**
     * Valida la complejidad de la contrase√±a.
     * @param pw La contrase√±a a validar.
     * @return Una cadena con todos los errores encontrados, o `null` si es v√°lida.
     */
    fun validatePassword(pw: String) = buildList {
        if (pw.length < 10) add("Al menos 10 caracteres.")
        if (!upper.matches(pw)) add("Debe incluir una may√∫scula.")
        if (!lower.matches(pw)) add("Debe incluir una min√∫scula.")
        if (!digit.matches(pw)) add("Debe incluir un n√∫mero.")
        if (!special.matches(pw)) add("Debe incluir un caracter especial (@#$%).")
    }.takeIf { it.isNotEmpty() }?.joinToString(" ")

    /**
     * Valida que la contrase√±a de confirmaci√≥n coincida con la original.
     * @param pw La contrase√±a original.
     * @param confirm La contrase√±a de confirmaci√≥n.
     * @return Un mensaje de error si no coinciden, o `null` si son iguales.
     */
    fun validateConfirmPassword(pw: String, confirm: String) =
        if (confirm != pw) "Las contrase√±as no coinciden." else null

    /**
     * Valida el n√∫mero de tel√©fono (opcional).
     * @param phone El n√∫mero de tel√©fono a validar.
     * @return Un mensaje de error si es inv√°lido, o `null` si es correcto o est√° vac√≠o.
     */
    fun validatePhone(phone: String?): String? =
        if (phone.isNullOrBlank()) null
        // üí° Ahora valida un n√∫mero de 8 d√≠gitos o el formato completo.
        else if (!phoneRegex.matches(phone)) "N√∫mero inv√°lido. (Debe ser de 8 d√≠gitos sin el prefijo, o el formato completo +569)." else null

    /**
     * Valida que se haya seleccionado al menos un g√©nero favorito.
     * @param selected El n√∫mero de g√©neros seleccionados.
     * @return Un mensaje de error si es menor a 1, o `null` en caso contrario.
     */
    fun validateGenres(selected: Int) =
        if (selected < 1) "Selecciona al menos un g√©nero." else null
}